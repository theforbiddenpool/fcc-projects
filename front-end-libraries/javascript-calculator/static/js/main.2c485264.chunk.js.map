{"version":3,"sources":["App.js","components/Buttons.js","components/Display.js","index.js"],"names":["DECIMAL_PRECISION","App","useState","displayValue","setDisplayValue","currentExpression","setCurrentExpression","previousKeyClicked","setPreviousKeyClicked","isNumberNegative","setIsNumberNegative","isCalculationDone","setIsCalculationDone","handleDisplayClear","e","expression","currentTarget","id","hasPreviousOperation","removePreviousOperator","i","length","test","slice","handleDisplayNumber","number","parseInt","value","handleOperation","operator","formatForNegativeNumbers","targetOperation","handleDot","hasDot","evaluteResult","result","Math","round","eval","handleCalculationDone","target","classList","contains","onClick","handleButtonNumber","handleButtonClear","handleButtonOperation","handleButtonDot","handleButtonEquals","Buttons","props","className","Display","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2c485264.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.scss';\n\nimport Buttons from './components/Buttons';\nimport Display from './components/Display'\n\nconst DECIMAL_PRECISION = 1000000000000\n\nconst App = () => {\n  const [ displayValue, setDisplayValue ] = useState(0)\n  const [ currentExpression, setCurrentExpression ] = useState('')\n  const [ previousKeyClicked, setPreviousKeyClicked ] = useState(null)\n  const [ isNumberNegative, setIsNumberNegative ] = useState(false)\n  const [ isCalculationDone, setIsCalculationDone ] = useState(false)\n\n\n  function handleDisplayClear(e) {\n    let expression = ''\n    setDisplayValue(0)\n\n    if(e.currentTarget.id !== 'clear') {\n      if(hasPreviousOperation()) {\n        expression = removePreviousOperator()\n      } else {\n        for(let i = currentExpression.length-1; i > 0; i--) {\n          if(/[/*+-]/.test(currentExpression[i])) {\n            expression = currentExpression.slice(0, i + 1)\n            break\n          }\n        }\n      }\n    }\n\n    setCurrentExpression(expression)\n  }\n\n  function handleDisplayNumber(e) {\n    const number = parseInt(e.currentTarget.value)\n\n    if(number === 0 && previousKeyClicked === 0) return\n\n    if(displayValue === 0) {\n      setDisplayValue(`${number}`)\n    } else {\n      setDisplayValue(`${displayValue}${number}`)\n    }\n    \n    setCurrentExpression(`${currentExpression}${number}`)\n    setPreviousKeyClicked(number)\n  }\n\n  function handleOperation(e) {\n    let operator = e.currentTarget.value\n    let expression = currentExpression\n\n    if(hasPreviousOperation()) {\n      if(operator === '-' && !isNumberNegative) {\n        operator = formatForNegativeNumbers(operator)\n        setDisplayValue('-')\n      } else {\n        expression = removePreviousOperator()\n        setDisplayValue(0)\n      }\n    } else {\n      if(expression === '') {\n        expression = 0\n      }\n\n      if(isNumberNegative) {\n        operator = formatForNegativeNumbers(operator)\n      }\n      setDisplayValue(0) \n    }\n\n    setCurrentExpression(expression + operator)\n    setPreviousKeyClicked(operator)\n  }\n\n  function hasPreviousOperation() {\n    return /[/*+-]$/.test(currentExpression)\n  }\n\n  function formatForNegativeNumbers(targetOperation) {\n    if(isNumberNegative) {\n      setIsNumberNegative(false)\n      return `)${targetOperation}`\n    } else {\n      setIsNumberNegative(true)\n      return `(${targetOperation}`\n    }\n  }\n\n  function removePreviousOperator() {\n    if(isNumberNegative) {\n      setIsNumberNegative(false)\n      return currentExpression.slice(0, currentExpression.length - 3)\n    } else {\n      return currentExpression.slice(0, currentExpression.length - 1)\n    }\n  }\n\n  function handleDot() {\n    if(hasDot()) return\n\n    if(displayValue == 0 && previousKeyClicked !== 0)\n      setCurrentExpression(currentExpression + '0.')\n    else\n      setCurrentExpression(currentExpression + '.')\n\n    setDisplayValue(displayValue + '.')\n    setPreviousKeyClicked('.')\n  }\n\n  function hasDot() {\n    return /\\./.test(displayValue)\n  }\n\n  function evaluteResult() {\n    let expression = currentExpression\n    \n    if(expression === '') return\n    \n    if(hasPreviousOperation()) {\n      expression = removePreviousOperator()\n    } else if(isNumberNegative) {\n      expression += ')'\n    }\n    \n    const result = Math.round(DECIMAL_PRECISION * eval(expression)) / DECIMAL_PRECISION\n    setCurrentExpression(expression)\n    setDisplayValue(result)\n    setPreviousKeyClicked('=')\n    setIsCalculationDone(true)\n  }\n\n  function handleCalculationDone(e) {\n    if(!isCalculationDone) return\n\n    setDisplayValue(0)\n    setPreviousKeyClicked(null)\n    setIsNumberNegative(false)\n    setIsCalculationDone(false)\n    \n    if(e.target.classList.contains('btn-operator')) {\n      setCurrentExpression(`${displayValue}${e.target.value}`)\n    } else if(e.target.classList.contains('btn-number')) {\n      setDisplayValue(e.target.value)\n      setCurrentExpression(e.target.value)\n    } else {\n      setCurrentExpression('')\n    }\n    setPreviousKeyClicked(e.target.value)\n  }\n\n  return (\n    <main id=\"calculator\" onClick={handleCalculationDone}>\n      <Display expression={currentExpression} number={displayValue} />\n      <Buttons handleButtonNumber={handleDisplayNumber} handleButtonClear={handleDisplayClear} handleButtonOperation={handleOperation} handleButtonDot={handleDot} handleButtonEquals={evaluteResult} />\n    </main>\n  )\n}\n\nexport default App","import React from 'react'\n\nconst Buttons = (props) => (\n  <section className=\"buttons-wrapper\">\n    <button className=\"calc-btn\" id=\"clear\" onClick={props.handleButtonClear}>AC</button>\n    <button className=\"calc-btn\" onClick={props.handleButtonClear}>CE</button>\n    <button className=\"calc-btn btn-operator\" value=\"/\" id=\"divide\" onClick={props.handleButtonOperation}>/</button>\n    <button className=\"calc-btn btn-operator\" value=\"*\" id=\"multiply\" onClick={props.handleButtonOperation}>Ã—</button>\n    <button className=\"calc-btn btn-number\" value=\"7\" id=\"seven\" onClick={props.handleButtonNumber}>7</button>\n    <button className=\"calc-btn btn-number\" value=\"8\" id=\"eight\" onClick={props.handleButtonNumber}>8</button>\n    <button className=\"calc-btn btn-number\" value=\"9\" id=\"nine\" onClick={props.handleButtonNumber}>9</button>\n    <button className=\"calc-btn btn-operator\" value=\"-\" id=\"subtract\" onClick={props.handleButtonOperation}>-</button>\n    <button className=\"calc-btn btn-number\" value=\"4\" id=\"four\" onClick={props.handleButtonNumber}>4</button>\n    <button className=\"calc-btn btn-number\" value=\"5\" id=\"five\" onClick={props.handleButtonNumber}>5</button>\n    <button className=\"calc-btn btn-number\" value=\"6\" id=\"six\" onClick={props.handleButtonNumber}>6</button>\n    <button className=\"calc-btn btn-operator\" value=\"+\" id=\"add\" onClick={props.handleButtonOperation}>+</button>\n    <button className=\"calc-btn btn-number\" value=\"1\" id=\"one\" onClick={props.handleButtonNumber}>1</button>\n    <button className=\"calc-btn btn-number\" value=\"2\" id=\"two\" onClick={props.handleButtonNumber}>2</button>\n    <button className=\"calc-btn btn-number\" value=\"3\" id=\"three\" onClick={props.handleButtonNumber}>3</button>\n    <button className=\"calc-btn\" id=\"equals\" onClick={props.handleButtonEquals}>=</button>\n    <button className=\"calc-btn btn-number\" value=\"0\" id=\"zero\" onClick={props.handleButtonNumber}>0</button>\n    <button className=\"calc-btn\" value=\".\" id=\"decimal\" onClick={props.handleButtonDot}>.</button>\n  </section>\n)\n\nexport default Buttons","import React from 'react'\n\nconst Display = (props) => (\n  <section className=\"display\">\n    <div className=\"expression\">{props.expression}</div>\n    <div className=\"number\" id=\"display\">{props.number}</div>\n  </section>\n)\n\nexport default Display\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}